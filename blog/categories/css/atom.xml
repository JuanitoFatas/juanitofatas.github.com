<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | 台北小碼農]]></title>
  <link href="http://JuanitoFatas.github.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://JuanitoFatas.github.com/"/>
  <updated>2011-10-31T22:25:27+08:00</updated>
  <id>http://JuanitoFatas.github.com/</id>
  <author>
    <name><![CDATA[Juanito Fatas Huang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://JuanitoFatas.github.com/blog/2011/10/31/test/"/>
    <updated>2011-10-31T13:48:00+08:00</updated>
    <id>http://JuanitoFatas.github.com/blog/2011/10/31/test</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;; -&lt;em&gt;- Mode: Lisp; Syntax: Common-Lisp; -&lt;/em&gt;- File: utilities.lisp&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Basic utility functions and macros, used throughout the code.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;; The utilities are divided into control flow macros, list</span>
</span><span class='line'><span class="c1">;;; utilities, functions for 2-dimensional points, numeric utilities,</span>
</span><span class='line'><span class="c1">;;; some trivial functions, utilities for strings, symbols and</span>
</span><span class='line'><span class="c1">;;; printing, a debugging tool, and a testing tool.&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">eval-when</span> <span class="p">(</span><span class="nb">eval </span><span class="nv">compile</span> <span class="nv">load</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; Make it ok to place a function definition on a built-in LISP symbol.</span>
</span><span class='line'>  <span class="o">#</span><span class="nv">+</span><span class="p">(</span><span class="nb">or </span><span class="nv">Allegro</span> <span class="nv">EXCL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="nf">pkg</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">excl</span> <span class="nv">common-lisp</span> <span class="nv">common-lisp-user</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">setf</span> <span class="p">(</span><span class="nf">excl:package-definition-lock</span> <span class="p">(</span><span class="nf">find-package</span> <span class="nv">pkg</span><span class="p">))</span> <span class="nv">nil</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Control Flow Macros&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;; We define iteration macros to match the book&#39;s pseudo-code.</span>
</span><span class='line'><span class="c1">;;; This could all be done with LOOP, but some users don&#39;t have</span>
</span><span class='line'><span class="c1">;;; the LOOP from the 2nd edition of &#39;Common Lisp: the Language&#39;.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defmacro </span><span class="nv">while</span> <span class="p">(</span><span class="nb">test </span><span class="nv">do</span> <span class="nv">&amp;amp</span><span class="c1">;body body)</span>
</span><span class='line'>  <span class="s">&quot;Execute body while the test is true.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">do</span> <span class="ss">&#39;do</span><span class="p">))</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">do</span> <span class="p">()</span> <span class="p">((</span><span class="nb">not </span><span class="o">,</span><span class="nv">test</span><span class="p">)</span> <span class="nv">nil</span><span class="p">)</span> <span class="o">,@</span><span class="nv">body</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defmacro </span><span class="nv">for-each</span> <span class="p">(</span><span class="nf">var</span> <span class="nv">in</span> <span class="nv">list</span> <span class="nv">do</span> <span class="nv">&amp;amp</span><span class="c1">;body body)</span>
</span><span class='line'>  <span class="s">&quot;Execute body for each element of list.  VAR can be a list or tree</span>
</span><span class='line'><span class="s">  of variables, in which case the elements are destructured.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">in</span> <span class="ss">&#39;in</span><span class="p">))</span> <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">do</span> <span class="ss">&#39;do</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">typecase</span> <span class="nv">var&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">symbol </span><span class="o">`</span><span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="o">,</span><span class="nv">var</span> <span class="o">,</span><span class="nv">list</span><span class="p">)</span> <span class="o">,@</span><span class="nv">body</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">list-var</span> <span class="p">(</span><span class="nf">gensym</span><span class="p">)))</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="o">,</span><span class="nv">list-var</span> <span class="o">,</span><span class="nv">list</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">destructuring-bind</span> <span class="o">,</span><span class="nv">var</span> <span class="o">,</span><span class="nv">list-var</span> <span class="o">,@</span><span class="nv">body</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;~V is an illegal variable in (for each ~V in ~A ...)&quot;</span>
</span><span class='line'>      <span class="nv">var</span> <span class="nv">list</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defmacro for </span><span class="p">(</span><span class="nf">var</span> <span class="nv">=</span> <span class="nv">start</span> <span class="nv">to</span> <span class="nv">end</span> <span class="nv">do</span> <span class="nv">&amp;amp</span><span class="c1">;body body)</span>
</span><span class='line'>  <span class="s">&quot;Execute body with var bound to succesive integers.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">eq</span> <span class="nv">var</span> <span class="ss">&#39;each</span><span class="p">)</span> <span class="c1">; Allow (for each ...) instead of (for-each ...)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="o">`</span><span class="p">(</span><span class="nf">for-each</span> <span class="o">,</span><span class="nv">=</span> <span class="o">,</span><span class="nv">start</span> <span class="o">,</span><span class="nv">to</span> <span class="o">,</span><span class="nv">end</span> <span class="o">,</span><span class="nv">do</span> <span class="o">,@</span><span class="nv">body</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">=</span> <span class="ss">&#39;=</span><span class="p">))</span> <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">to</span> <span class="ss">&#39;to</span><span class="p">))</span> <span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">do</span> <span class="ss">&#39;do</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">end-var</span> <span class="p">(</span><span class="nb">gensym </span><span class="s">&quot;END&quot;</span><span class="p">)))</span>
</span><span class='line'>     <span class="o">`</span><span class="p">(</span><span class="nf">do</span> <span class="p">((</span><span class="o">,</span><span class="nv">var</span> <span class="o">,</span><span class="nv">start</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="o">,</span><span class="nv">var</span><span class="p">))</span> <span class="p">(</span><span class="o">,</span><span class="nv">end-var</span> <span class="o">,</span><span class="nv">end</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">&amp;gt</span><span class="c1">; ,var ,end-var) nil)</span>
</span><span class='line'>    <span class="o">,@</span><span class="nv">body</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defmacro </span><span class="nv">deletef</span> <span class="p">(</span><span class="nf">item</span> <span class="nv">sequence</span> <span class="nv">&amp;amp</span><span class="c1">;rest keys &amp;amp;environment env)</span>
</span><span class='line'>  <span class="s">&quot;Destructively delete item from sequence, which must be SETF-able.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">multiple-value-bind</span> <span class="p">(</span><span class="nf">temps</span> <span class="nv">vals</span> <span class="nv">stores</span> <span class="nv">store-form</span> <span class="nv">access-form</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="p">(</span><span class="nf">get-setf-expansion</span> <span class="nv">sequence</span> <span class="nv">env</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">assert </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">length</span> <span class="nv">stores</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">item-var</span> <span class="p">(</span><span class="nb">gensym </span><span class="s">&quot;ITEM&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="o">`</span><span class="p">(</span><span class="nf">let*</span> <span class="p">((</span><span class="o">,</span><span class="nv">item-var</span> <span class="o">,</span><span class="nv">item</span><span class="p">)</span>
</span><span class='line'>    <span class="o">,@</span><span class="p">(</span><span class="nf">mapcar</span> <span class="o">#</span><span class="ss">&#39;list</span> <span class="nv">temps</span> <span class="nv">vals</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">first </span><span class="nv">stores</span><span class="p">)</span> <span class="p">(</span><span class="nf">delete</span> <span class="o">,</span><span class="nv">item-var</span> <span class="o">,</span><span class="nv">access-form</span> <span class="o">,@</span><span class="nv">keys</span><span class="p">)))</span>
</span><span class='line'>  <span class="o">,</span><span class="nv">store-form</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defmacro </span><span class="nv">define-if-undefined</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest definitions)</span>
</span><span class='line'>  <span class="s">&quot;Use this to conditionally define functions, variables, or macros that</span>
</span><span class='line'><span class="s">  may or may not be pre-defined in this Lisp.  This can be used to provide</span>
</span><span class='line'><span class="s">  CLtL2 compatibility for older Lisps.&quot;</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">progn&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="o">,@</span><span class="p">(</span><span class="nf">mapcar</span> <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nf">def</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nb">name </span><span class="p">(</span><span class="nb">second </span><span class="nv">def</span><span class="p">)))</span>
</span><span class='line'>         <span class="o">`</span><span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">boundp</span> <span class="ss">&#39;,name</span><span class="p">)</span> <span class="p">(</span><span class="nf">fboundp</span> <span class="ss">&#39;,name</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">special-form-p</span> <span class="ss">&#39;,name</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">macro-function</span> <span class="ss">&#39;,name</span><span class="p">)))</span>
</span><span class='line'>           <span class="o">,</span><span class="nv">def</span><span class="p">)))</span>
</span><span class='line'>       <span class="nv">definitions</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; List Utilities&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">length&gt;1</span> <span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Is this a list of 2 or more elements?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">consp</span> <span class="nv">list</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">list</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">length=1</span> <span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Is this a list of exactly one element?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">consp</span> <span class="nv">list</span><span class="p">)</span> <span class="p">(</span><span class="nf">null</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">list</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">random-element</span> <span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Return some element of the list, chosen at random.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">nth </span><span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">list</span><span class="p">))</span> <span class="nv">list</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">mappend</span> <span class="p">(</span><span class="k">fn </span><span class="nv">&amp;amp</span><span class="c1">;rest lists)</span>
</span><span class='line'>  <span class="s">&quot;Apply fn to respective elements of list(s), and append results.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="o">#</span><span class="ss">&#39;append</span> <span class="p">(</span><span class="nb">apply </span><span class="o">#</span><span class="ss">&#39;mapcar</span> <span class="k">fn </span><span class="nv">lists</span><span class="p">)</span> <span class="nv">:from-end</span> <span class="nv">t</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">starts-with</span> <span class="p">(</span><span class="nb">list </span><span class="nv">element</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Is this a list that starts with the given element?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">consp</span> <span class="nv">list</span><span class="p">)</span> <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">first </span><span class="nv">list</span><span class="p">)</span> <span class="nv">element</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">last1</span> <span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Return the last element of a list.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">last </span><span class="nv">list</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">left-rotate</span> <span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Move the first element to the end of the list.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">append</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">list</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">first </span><span class="nv">list</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">right-rotate</span> <span class="p">(</span><span class="nf">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Move the last element to the front of the list.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">append</span> <span class="p">(</span><span class="nb">last </span><span class="nv">list</span><span class="p">)</span> <span class="p">(</span><span class="nb">butlast </span><span class="nv">list</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">transpose</span> <span class="p">(</span><span class="nf">list-of-lists</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Transpose a matrix represented as a list of lists.</span>
</span><span class='line'><span class="s">  Example: (transpose &#39;((a b c) (d e f))) =&gt; ((a d) (b e) (c f)).&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply </span><span class="o">#</span><span class="ss">&#39;mapcar</span> <span class="o">#</span><span class="ss">&#39;list</span> <span class="nv">list-of-lists</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">reuse-cons</span> <span class="p">(</span><span class="nf">x</span> <span class="nv">y</span> <span class="nv">x-y</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Return (cons x y), or reuse x-y if it is equal to (cons x y)&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">eql</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">x-y</span><span class="p">))</span> <span class="p">(</span><span class="nf">eql</span> <span class="nv">y</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">x-y</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="nv">x-y</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="s">&quot;An expression is a list consisting of a prefix operator followed by args,</span>
</span><span class='line'><span class="s">Or it can be a symbol, denoting an operator with no arguments.</span>
</span><span class='line'><span class="s">Expressions are used in Logic, and as actions for agents.&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">make-exp</span> <span class="p">(</span><span class="nf">op</span> <span class="nv">&amp;amp</span><span class="c1">;rest args) (cons op args))</span>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">op</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span> <span class="s">&quot;Operator of an expression&quot;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">listp</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">first </span><span class="nv">exp</span><span class="p">)</span> <span class="nv">exp</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">args</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span> <span class="s">&quot;Arguments of an expression&quot;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">listp</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">exp</span><span class="p">)</span> <span class="nv">nil</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">arg1</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span> <span class="s">&quot;First argument&quot;</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">args</span> <span class="nv">exp</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">defun</span> <span class="nv">arg2</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span> <span class="s">&quot;Second argument&quot;</span> <span class="p">(</span><span class="nb">second </span><span class="p">(</span><span class="nf">args</span> <span class="nv">exp</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defsetf</span> <span class="nv">args</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span> <span class="p">(</span><span class="nf">new-value</span><span class="p">)</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">setf</span> <span class="p">(</span><span class="nf">cdr</span> <span class="o">,</span><span class="nv">exp</span><span class="p">)</span> <span class="o">,</span><span class="nv">new-value</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">prefix-&gt;infix</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Convert a fully parenthesized prefix expression into infix notation.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">atom</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">exp</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">((</span><span class="nf">length=1</span> <span class="p">(</span><span class="nf">args</span> <span class="nv">exp</span><span class="p">))</span> <span class="nv">exp</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nf">insert-between</span> <span class="p">(</span><span class="nf">op</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nf">mapcar</span> <span class="o">#</span><span class="ss">&#39;prefix-&amp;gt</span><span class="c1">;infix (args exp))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">insert-between</span> <span class="p">(</span><span class="nf">item</span> <span class="nv">list</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Insert item between every element of list.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">null</span> <span class="nv">list</span><span class="p">)</span> <span class="p">(</span><span class="nf">length=1</span> <span class="nv">list</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="nv">list</span>
</span><span class='line'><span class="p">(</span><span class="nb">list* </span><span class="p">(</span><span class="nb">first </span><span class="nv">list</span><span class="p">)</span> <span class="nv">item</span> <span class="p">(</span><span class="nf">insert-between</span> <span class="nv">item</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">list</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Functions for manipulating 2-dimensional points&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defstruct </span><span class="p">(</span><span class="nf">xy</span> <span class="p">(</span><span class="nf">:type</span> <span class="nv">list</span><span class="p">))</span> <span class="s">&quot;A two-dimensional (i.e. x and y) point.&quot;</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">xy-p</span> <span class="p">(</span><span class="nf">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Is the argument a 2-D point?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">consp</span> <span class="nv">arg</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">length</span> <span class="nv">arg</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">every</span> <span class="o">#</span><span class="ss">&#39;numberp</span> <span class="nv">arg</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">@</span> <span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span> <span class="s">&quot;Create a 2-D point&quot;</span> <span class="p">(</span><span class="nf">make-xy</span> <span class="nv">:x</span> <span class="nv">x</span> <span class="nv">:y</span> <span class="nv">y</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">xy-equal</span> <span class="p">(</span><span class="nf">p</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nf">equal</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">xy-add</span> <span class="p">(</span><span class="nf">p</span> <span class="nv">q</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Add two points, component-wise.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">@</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">xy-x</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">q</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">xy-y</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">q</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">xy-distance</span> <span class="p">(</span><span class="nf">p</span> <span class="nv">q</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;The distance between two points.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">xy-x</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">q</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>   <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">xy-y</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">q</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">x+y-distance</span> <span class="p">(</span><span class="nf">p</span> <span class="nv">q</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;The &#39;city block distance&#39; between two points.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">abs</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">xy-x</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">q</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="p">(</span><span class="nf">abs</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">xy-y</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">q</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">xy-between</span> <span class="p">(</span><span class="nf">xy1</span> <span class="nv">xy2</span> <span class="nv">xy3</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Predicate; return t iff xy1 is between xy2 and xy3. Points are collinear.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">between</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">xy1</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">xy2</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">xy3</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>   <span class="p">(</span><span class="nf">between</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">xy1</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">xy2</span><span class="p">)</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">xy3</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">rotate</span> <span class="p">(</span><span class="nf">o</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">o</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">y</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">o</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">@</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">b</span> <span class="nv">y</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">c</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">d</span> <span class="nv">y</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">inside</span> <span class="p">(</span><span class="nf">l</span> <span class="nv">xmax</span> <span class="nv">ymax</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Is the point l inside a rectangle from 0,0 to xmax,ymax?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="p">(</span><span class="nf">xy-x</span> <span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">y</span> <span class="p">(</span><span class="nf">xy-y</span> <span class="nv">l</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">&amp;gt</span><span class="c1">;= x 0) (&amp;gt;= y 0) (&amp;lt; x xmax) (&amp;lt; y ymax))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Numeric Utilities&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defconstant</span> <span class="nv">infinity</span> <span class="nv">most-positive-single-float</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defconstant</span> <span class="nv">minus-infinity</span> <span class="nv">most-negative-single-float</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">average</span> <span class="p">(</span><span class="nf">numbers</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Numerical average (mean) of a list of numbers.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">sum</span> <span class="nv">numbers</span><span class="p">)</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">numbers</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">running-average</span> <span class="p">(</span><span class="nf">avg</span> <span class="nv">new</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Calculate new average given previous average over n data points&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="nv">new</span> <span class="p">(</span><span class="nb">* </span><span class="nv">avg</span> <span class="nv">n</span><span class="p">))</span> <span class="p">(</span><span class="mi">1</span><span class="nv">+</span> <span class="nv">n</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">square</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">sum</span> <span class="p">(</span><span class="nf">numbers</span> <span class="nv">&amp;amp</span><span class="c1">;optional (key #&#39;identity))</span>
</span><span class='line'>  <span class="s">&quot;Add up all the numbers; if KEY is given, apply it to each number first.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">null</span> <span class="nv">numbers</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="mi">0</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">funcall</span> <span class="nv">key</span> <span class="p">(</span><span class="nb">first </span><span class="nv">numbers</span><span class="p">))</span> <span class="p">(</span><span class="nf">sum</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">numbers</span><span class="p">)</span> <span class="nv">key</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">between</span> <span class="p">(</span><span class="nf">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Predicate; return t iff number x is between numbers y and z.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">&amp;lt</span><span class="c1">;= y x z) (&gt;= y x z)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">rms-error</span> <span class="p">(</span><span class="nf">predicted</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Compute root mean square error between predicted list and target list&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nf">ms-error</span> <span class="nv">predicted</span> <span class="nv">target</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">ms-error</span> <span class="p">(</span><span class="nf">predicted</span> <span class="nv">target</span> <span class="nv">&amp;amp</span><span class="c1">;aux (sum 0))</span>
</span><span class='line'>  <span class="s">&quot;Compute mean square error between predicted list and target list&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mapc</span> <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">incf</span> <span class="nv">sum</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span> <span class="nv">predicted</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="nv">sum</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">predicted</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">boolean-error</span> <span class="p">(</span><span class="nf">predicted</span> <span class="nv">target</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">equal</span> <span class="nv">predicted</span> <span class="nv">target</span><span class="p">)</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">dot-product</span> <span class="p">(</span><span class="nf">l1</span> <span class="nv">l2</span> <span class="nv">&amp;amp</span><span class="c1">;aux (sum 0)) ;;; dot product of two lists</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mapc</span> <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nf">x1</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">(</span><span class="nf">incf</span> <span class="nv">sum</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x1</span> <span class="nv">x2</span><span class="p">)))</span> <span class="nv">l1</span> <span class="nv">l2</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">sum</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">iota</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">&amp;amp</span><span class="c1">;optional (start-at 0))</span>
</span><span class='line'>  <span class="s">&quot;Return a list of n consecutive integers, by default starting at 0.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">&amp;lt</span><span class="c1">;= n 0) nil (cons start-at (iota (- n 1) (+ start-at 1)))))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">random-integer</span> <span class="p">(</span><span class="nf">from</span> <span class="nv">to</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Return an integer chosen at random from the given interval.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="nv">from</span> <span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">- </span><span class="nv">to</span> <span class="nv">from</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">normal</span> <span class="p">(</span><span class="nf">x</span> <span class="nv">mu</span> <span class="nv">sigma</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">exp</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">mu</span><span class="p">)))</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nf">square</span> <span class="nv">sigma</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">pi</span><span class="p">))</span> <span class="nv">sigma</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">sample-with-replacement</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">population</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">result</span> <span class="nv">nil</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">dotimes </span><span class="p">(</span><span class="nf">i</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">push</span> <span class="p">(</span><span class="nf">random-element</span> <span class="nv">population</span><span class="p">)</span> <span class="nv">result</span><span class="p">))</span>
</span><span class='line'><span class="nv">result</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">sample-without-replacement</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">population</span> <span class="nv">&amp;amp</span><span class="c1">;optional&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                 <span class="p">(</span><span class="nf">m</span> <span class="p">(</span><span class="nf">length</span> <span class="nv">population</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="c1">;; Assumes that m = (length population)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">&amp;lt</span><span class="c1">;= n 0) nil)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">((</span><span class="nf">&amp;gt</span><span class="c1">;= n m) population)</span>
</span><span class='line'><span class="p">((</span><span class="nf">&amp;gt</span><span class="c1">;= (/ n m) (random 1.0))</span>
</span><span class='line'> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">first </span><span class="nv">population</span><span class="p">)</span> <span class="p">(</span><span class="nf">sample-without-replacement</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">population</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">m</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nf">sample-without-replacement</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">population</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">m</span> <span class="mi">1</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">fuzz</span> <span class="p">(</span><span class="nf">quantity</span> <span class="nv">&amp;amp</span><span class="c1">;optional (proportion .1) (round-off .01))</span>
</span><span class='line'>  <span class="s">&quot;Add and also subtract a random fuzz-factor to a quantity.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">round-off</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">quantity&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nb">* </span><span class="nv">quantity</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nb">float </span><span class="nv">proportion</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nb">float </span><span class="nv">proportion</span><span class="p">)))))</span>
</span><span class='line'>     <span class="nv">round-off</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">round-off</span> <span class="p">(</span><span class="nf">number</span> <span class="nv">precision</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Round off the number to specified precision. E.g. (round-off 1.23 .1) = 1.2&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="nv">precision</span> <span class="p">(</span><span class="nf">round</span> <span class="nv">number</span> <span class="nv">precision</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Trivial Functions&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">nothing</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest args)</span>
</span><span class='line'>  <span class="s">&quot;Don&#39;t do anything, and return nil.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">declare</span> <span class="p">(</span><span class="nf">ignore</span> <span class="nv">args</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">nil</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">declare-ignore</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest args)</span>
</span><span class='line'>  <span class="s">&quot;Ignore the arguments.&quot;</span>
</span><span class='line'>  <span class="c1">;; This is used to avoid compiler warnings in defmethod.</span>
</span><span class='line'>  <span class="c1">;; Some compilers warn &quot;Variable unused&quot; if it is bound by a method</span>
</span><span class='line'>  <span class="c1">;; but does not appear in the body.  However, if you put in a</span>
</span><span class='line'>  <span class="c1">;; (declare (ignore var)), then other compilers warn &quot;var declared</span>
</span><span class='line'>  <span class="c1">;; ignored, but is actually used&quot;, on the grounds that it is implicitly</span>
</span><span class='line'>  <span class="c1">;; used to do method dispatch.  So its safest to use declare-ignore.</span>
</span><span class='line'>  <span class="c1">;; If you like, you can redefine declare-ignore to be a macro that</span>
</span><span class='line'>  <span class="c1">;; expands to either (declare (ignore args)), or to nothing, depending</span>
</span><span class='line'>  <span class="c1">;; on the implementation.</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">declare</span> <span class="p">(</span><span class="nf">ignore</span> <span class="nv">args</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">nil</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;h1&gt;-</span><span class="p">(</span><span class="nb">or </span><span class="nv">MCL</span> <span class="nv">Lispworks</span><span class="p">)</span> <span class="c1">;; MCL, Lispworks already define this function&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">true</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest args) &quot;Always return true.&quot; (declare (ignore args)) t)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;h1&gt;-</span><span class="p">(</span><span class="nb">or </span><span class="nv">MCL</span> <span class="nv">Lispworks</span><span class="p">)</span> <span class="c1">;; MCL, Lispworks already define this function&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">false</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest args) &quot;Always return false.&quot; (declare (ignore args)) nil)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">required</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;optional (msg &quot;A required argument is missing.&quot;) &amp;amp;rest args)</span>
</span><span class='line'>  <span class="s">&quot;If this ever gets called, it means something that was required was not</span>
</span><span class='line'><span class="s">  supplied.  Use as default value for &amp;amp;key args or defstruct slots.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply </span><span class="o">#</span><span class="ss">&#39;error</span> <span class="nv">msg</span> <span class="nv">args</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Utilities for strings and symbols and printing&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">stringify</span> <span class="p">(</span><span class="nf">exp</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Coerce argument to a string.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">stringp</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">exp</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">((</span><span class="nf">symbolp</span> <span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nf">symbol-name</span> <span class="nv">exp</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">nil</span> <span class="s">&quot;~A&quot;</span> <span class="nv">exp</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">concat-symbol</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest args)</span>
</span><span class='line'>  <span class="s">&quot;Concatenate the args into one string, and turn that into a symbol.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">intern</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">nil</span> <span class="s">&quot;~{~a~}&quot;</span> <span class="nv">args</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">print-grid</span> <span class="p">(</span><span class="nf">array</span> <span class="nv">&amp;amp</span><span class="c1">;key (stream t) (key #&#39;identity) (width 3))</span>
</span><span class='line'>  <span class="s">&quot;Print the contents of a 2-D array, numbering the edges.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">max-x</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">array-dimension</span> <span class="nv">array</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">max-y</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">array-dimension</span> <span class="nv">array</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="c1">;; Print the header</span>
</span><span class='line'><span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~&amp;amp;&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">print-repeated</span> <span class="s">&quot; &quot;</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">for </span><span class="nv">x</span> <span class="nv">=</span> <span class="mi">0</span> <span class="nv">to</span> <span class="nv">max-x</span> <span class="nv">do</span>
</span><span class='line'> <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">print-dashes</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;|~%&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; Print each row</span>
</span><span class='line'><span class="p">(</span><span class="k">for </span><span class="nv">y1</span> <span class="nv">=</span> <span class="mi">0</span> <span class="nv">to</span> <span class="nv">max-y</span> <span class="nv">do</span>
</span><span class='line'> <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">max-y</span> <span class="nv">y1</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">print-centered</span> <span class="nv">y</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">;; Print each location</span>
</span><span class='line'>   <span class="p">(</span><span class="k">for </span><span class="nv">x</span> <span class="nv">=</span> <span class="mi">0</span> <span class="nv">to</span> <span class="nv">max-x</span> <span class="nv">do</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">print-centered</span> <span class="p">(</span><span class="nf">funcall</span> <span class="nv">key</span> <span class="p">(</span><span class="nf">aref</span> <span class="nv">array</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;|~%&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="c1">;; Print a dashed line</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">print-repeated</span> <span class="s">&quot; &quot;</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="k">for </span><span class="nv">x</span> <span class="nv">=</span> <span class="mi">0</span> <span class="nv">to</span> <span class="nv">max-x</span> <span class="nv">do</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">print-dashes</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">)))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;|~%&quot;</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; Print the X-coordinates along the bottom</span>
</span><span class='line'><span class="p">(</span><span class="nf">print-repeated</span> <span class="s">&quot; &quot;</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">for </span><span class="nv">x</span> <span class="nv">=</span> <span class="mi">0</span> <span class="nv">to</span> <span class="nv">max-x</span> <span class="nv">do</span>
</span><span class='line'> <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">print-centered</span> <span class="nv">x</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">))</span>
</span><span class='line'><span class="nv">array</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">print-centered</span> <span class="p">(</span><span class="nf">string</span> <span class="nv">width</span> <span class="nv">&amp;amp</span><span class="c1">;optional (stream t))</span>
</span><span class='line'>  <span class="s">&quot;Print STRING centered in a field WIDTH wide.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">blanks</span> <span class="p">(</span><span class="nb">- </span><span class="nv">width</span> <span class="p">(</span><span class="nf">length</span> <span class="p">(</span><span class="nf">stringify</span> <span class="nv">string</span><span class="p">)))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">print-repeated</span> <span class="s">&quot; &quot;</span> <span class="p">(</span><span class="nf">floor</span> <span class="nv">blanks</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">stream</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~A&quot;</span> <span class="nv">string</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">print-repeated</span> <span class="s">&quot; &quot;</span> <span class="p">(</span><span class="nf">ceiling</span> <span class="nv">blanks</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">stream</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">print-repeated</span> <span class="p">(</span><span class="nf">string</span> <span class="nv">n</span> <span class="nv">&amp;amp</span><span class="c1">;optional (stream t))</span>
</span><span class='line'>  <span class="s">&quot;Print the string n times.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dotimes </span><span class="p">(</span><span class="nf">i</span> <span class="nv">n</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~A&quot;</span> <span class="nv">string</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">print-dashes</span> <span class="p">(</span><span class="nf">width</span> <span class="nv">&amp;amp</span><span class="c1">;optional (stream t) separate-line)</span>
</span><span class='line'>  <span class="s">&quot;Print a line of dashes WIDTH wide.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="nv">separate-line</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~&amp;amp;&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">print-repeated</span> <span class="s">&quot;-&quot;</span> <span class="nv">width</span> <span class="nv">stream</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="nv">separate-line</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~%&quot;</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Assorted conversion utilities and predicates&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">copy-array</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">&amp;amp</span><span class="c1">;aux (dim (array-dimensions a))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                      <span class="p">(</span><span class="nf">b</span> <span class="p">(</span><span class="nb">make-array </span><span class="nv">dim</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="s">&quot;Make a copy of an array.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">copy-subarray</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">nil</span> <span class="nv">dim</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">b</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">copy-subarray</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">indices</span> <span class="nv">dim</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="nv">dim&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">dotimes </span><span class="p">(</span><span class="nf">i</span> <span class="p">(</span><span class="nb">first </span><span class="nv">dim</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">copy-subarray</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">append</span> <span class="nv">indices</span> <span class="p">(</span><span class="nb">list </span><span class="nv">i</span><span class="p">))</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">dim</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">setf</span> <span class="p">(</span><span class="nb">apply </span><span class="o">#</span><span class="ss">&#39;aref</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">b</span> <span class="nv">indices</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">apply </span><span class="o">#</span><span class="ss">&#39;aref</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">a</span> <span class="nv">indices</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">array-&gt;vector</span> <span class="p">(</span><span class="nf">array</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Convert a multi-dimensional array to a vector with the same elements.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">make-array </span><span class="p">(</span><span class="nf">array-total-size</span> <span class="nv">array</span><span class="p">)</span> <span class="nv">:displaced-to</span> <span class="nv">array</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">plot-alist</span> <span class="p">(</span><span class="nf">alist</span> <span class="nv">file</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-open-file</span> <span class="p">(</span><span class="nf">stream</span> <span class="nv">file</span> <span class="nv">:direction</span> <span class="nv">:output</span> <span class="nv">:if-does-not-exist</span> <span class="nv">:create&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                 <span class="nv">:if-exists</span> <span class="nv">:supersede</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="nf">xy</span> <span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~&amp;amp;~A ~A~%&quot;</span> <span class="p">(</span><span class="nf">car</span> <span class="nv">xy</span><span class="p">)</span> <span class="p">(</span><span class="nf">cdr</span> <span class="nv">xy</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">copy-hash-table</span> <span class="p">(</span><span class="nf">H1</span> <span class="nv">&amp;amp</span><span class="c1">;optional (copy-fn #&#39;identity))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">H2</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="nv">:test</span> <span class="o">#</span><span class="ss">&#39;equal</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">maphash</span> <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nb">key </span><span class="nv">val</span><span class="p">)</span> <span class="p">(</span><span class="nf">setf</span> <span class="p">(</span><span class="nf">gethash</span> <span class="nv">key</span> <span class="nv">H2</span><span class="p">)</span> <span class="p">(</span><span class="nf">funcall</span> <span class="nv">copy-fn</span> <span class="nv">val</span><span class="p">)))</span>
</span><span class='line'>     <span class="nv">H1</span><span class="p">)</span>
</span><span class='line'><span class="nv">H2</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">hash-table-&gt;list</span> <span class="p">(</span><span class="nf">table</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Convert a hash table into a list of (key . val) pairs.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">maphash</span> <span class="o">#</span><span class="ss">&#39;cons</span> <span class="nv">table</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">hprint</span> <span class="p">(</span><span class="nf">h</span> <span class="nv">&amp;amp</span><span class="c1">;optional (stream t))</span>
</span><span class='line'>  <span class="s">&quot;prints a hash table line by line&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">maphash</span> <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nb">key </span><span class="nv">val</span><span class="p">)</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">stream</span> <span class="s">&quot;~&amp;amp;~A:~10T ~A&quot;</span> <span class="nv">key</span> <span class="nv">val</span><span class="p">))</span> <span class="nv">h</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">h</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">compose</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">g</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Return a function h such that (h x) = (f (g x)).&quot;</span>
</span><span class='line'>  <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">funcall</span> <span class="nv">f</span> <span class="p">(</span><span class="nf">funcall</span> <span class="nv">g</span> <span class="nv">x</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">the-biggest</span> <span class="p">(</span><span class="k">fn </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">biggest</span> <span class="p">(</span><span class="nb">first </span><span class="nv">l</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">best-val</span> <span class="p">(</span><span class="nf">funcall</span> <span class="k">fn </span><span class="p">(</span><span class="nb">first </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="nf">x</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nb">val </span><span class="p">(</span><span class="nf">funcall</span> <span class="k">fn </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">&amp;gt</span><span class="c1">; val best-val)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">setq</span> <span class="nv">best-val</span> <span class="nv">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">setq</span> <span class="nv">biggest</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'><span class="nv">biggest</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">the-biggest-random-tie</span> <span class="p">(</span><span class="k">fn </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">random-element</span>
</span><span class='line'>   <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">biggest</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">first </span><span class="nv">l</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="p">(</span><span class="nf">best-val</span> <span class="p">(</span><span class="nf">funcall</span> <span class="k">fn </span><span class="p">(</span><span class="nb">first </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="nf">x</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nb">val </span><span class="p">(</span><span class="nf">funcall</span> <span class="k">fn </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'> <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">&amp;gt</span><span class="c1">; val best-val)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">best-val</span> <span class="nv">val</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">biggest</span> <span class="p">(</span><span class="nb">list </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">((</span><span class="nb">= </span><span class="nv">val</span> <span class="nv">best-val</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">push</span> <span class="nv">x</span> <span class="nv">biggest</span><span class="p">)))))</span>
</span><span class='line'> <span class="nv">biggest</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">the-biggest-that</span> <span class="p">(</span><span class="k">fn </span><span class="nv">p</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">biggest</span> <span class="p">(</span><span class="nb">first </span><span class="nv">l</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">best-val</span> <span class="p">(</span><span class="nf">funcall</span> <span class="k">fn </span><span class="p">(</span><span class="nb">first </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">dolist</span> <span class="p">(</span><span class="nf">x</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">funcall</span> <span class="nv">p</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nb">val </span><span class="p">(</span><span class="nf">funcall</span> <span class="k">fn </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">&amp;gt</span><span class="c1">; val best-val)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">best-val</span> <span class="nv">val</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">setq</span> <span class="nv">biggest</span> <span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">biggest</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">the-smallest</span> <span class="p">(</span><span class="k">fn </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">the-biggest</span> <span class="p">(</span><span class="nf">compose</span> <span class="o">#</span><span class="ss">&#39;-</span> <span class="nv">fn</span><span class="p">)</span> <span class="nv">l</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">the-smallest-random-tie</span> <span class="p">(</span><span class="k">fn </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">the-biggest-random-tie</span> <span class="p">(</span><span class="nf">compose</span> <span class="o">#</span><span class="ss">&#39;-</span> <span class="nv">fn</span><span class="p">)</span> <span class="nv">l</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">the-smallest-that</span> <span class="p">(</span><span class="k">fn </span><span class="nv">p</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">the-biggest-that</span> <span class="p">(</span><span class="nf">compose</span> <span class="o">#</span><span class="ss">&#39;-</span> <span class="nv">fn</span><span class="p">)</span> <span class="nv">p</span> <span class="nv">l</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Debugging tool&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defvar</span> <span class="nv">&lt;em&gt;debugging&lt;/em&gt;</span> <span class="nv">nil</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">dprint</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;rest args)</span>
</span><span class='line'>  <span class="s">&quot;Echo all the args when &lt;em&gt;debugging&lt;/em&gt; is true.  Return the first one.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="nv">&lt;em&gt;debugging&lt;/em&gt;</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;~&amp;amp;~{~S ~}~%&quot;</span> <span class="nv">args</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">first </span><span class="nv">args</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;;;; Testing Tool: deftest and test&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">defmacro </span><span class="nv">deftest</span> <span class="p">(</span><span class="nb">name </span><span class="nv">&amp;amp</span><span class="c1">;rest examples)</span>
</span><span class='line'>  <span class="s">&quot;Define a set of test examples.  Each example is of the form (exp test)</span>
</span><span class='line'><span class="s">  or (exp).  Evaluate exp and see if the result passes the test. Within the</span>
</span><span class='line'><span class="s">  test, the result is bound to *.  The example ((f 2))) has no test to</span>
</span><span class='line'><span class="s">  fail, so it alweays passes the test.  But ((+ 2 2) (= * 3)) has the test</span>
</span><span class='line'><span class="s">  (= * 3), which fails because * will be bound to the result 4, so the test</span>
</span><span class='line'><span class="s">  fails.  Call (TEST name) to count how many tests are failed within the</span>
</span><span class='line'><span class="s">  named test.  NAME is the name of an aima-system.&quot;</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">add-test</span> <span class="ss">&#39;,name</span> <span class="ss">&#39;,examples</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">add-test</span> <span class="p">(</span><span class="nb">name </span><span class="nv">examples</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;The functional interface for deftest: adds test examples to a system.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">system</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">get-aima-system</span> <span class="nv">name</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">(</span><span class="nf">add-aima-system</span> <span class="nv">:name</span> <span class="nv">name</span> <span class="nv">:examples</span> <span class="nv">examples</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">setf</span> <span class="p">(</span><span class="nf">aima-system-examples</span> <span class="nv">system</span><span class="p">)</span> <span class="nv">examples</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="nv">name</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">test</span> <span class="p">(</span><span class="nf">&amp;amp</span><span class="c1">;optional (name &#39;all) (print? &#39;t))</span>
</span><span class='line'>  <span class="s">&quot;Run a test suite and sum the number of errors.  If all is well, this</span>
</span><span class='line'><span class="s">  should return 0.  The second argument says what to print: nil for</span>
</span><span class='line'><span class="s">  nothing, t for everything, or FAIL for just those examples that fail.</span>
</span><span class='line'><span class="s">  If there are no test examples in the named system, put the system has</span>
</span><span class='line'><span class="s">  other systems as parts, run the tests for all those and sum the result.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">&lt;em&gt;print-pretty&lt;/em&gt;</span> <span class="nv">t</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">*standard-output*</span> <span class="p">(</span><span class="k">if </span><span class="nv">print?</span> <span class="nv">*standard-output*</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">make-broadcast-stream</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">system</span> <span class="p">(</span><span class="nf">aima-load-if-unloaded</span> <span class="nv">name</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">null</span> <span class="nv">system</span><span class="p">)</span> <span class="p">(</span><span class="nf">warn</span> <span class="s">&quot;No such system as ~A.&quot;</span> <span class="nv">name</span><span class="p">))</span>
</span><span class='line'>  <span class="p">((</span><span class="nb">and </span><span class="p">(</span><span class="nf">null</span> <span class="p">(</span><span class="nf">aima-system-examples</span> <span class="nv">system</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">every</span> <span class="o">#</span><span class="ss">&#39;symbolp</span> <span class="p">(</span><span class="nf">aima-system-parts</span> <span class="nv">system</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">sum</span>  <span class="p">(</span><span class="nf">aima-system-parts</span> <span class="nv">system</span><span class="p">)</span>
</span><span class='line'>     <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nf">part</span><span class="p">)</span> <span class="p">(</span><span class="nb">test </span><span class="nv">part</span> <span class="nv">print?</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nb">when </span><span class="nv">print?</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;Testing System ~A~%&quot;</span> <span class="nv">name</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">errors</span> <span class="p">(</span><span class="nf">count-if-not</span> <span class="o">#&#39;</span><span class="p">(</span><span class="nv">lambda</span> <span class="p">(</span><span class="nf">example</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">test-example</span> <span class="nv">example</span> <span class="nv">print?</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">aima-system-examples</span> <span class="nv">system</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">format</span> <span class="nv">*debug-io*</span> <span class="s">&quot;~%~2D error~P on system ~A~%&quot;</span>
</span><span class='line'>           <span class="nv">errors</span> <span class="nv">errors</span> <span class="nv">name</span><span class="p">)</span>
</span><span class='line'>       <span class="nv">errors</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">defun</span> <span class="nv">test-example</span> <span class="p">(</span><span class="nf">example</span> <span class="nv">&amp;amp</span><span class="c1">;optional (print? t))</span>
</span><span class='line'>  <span class="s">&quot;Does the EXP part of this example pass the TEST?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">stringp</span> <span class="nv">example</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="p">(</span><span class="nf">progn</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">print?</span> <span class="nv">t</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;~&amp;amp;;;; ~A~%&quot;</span> <span class="nv">example</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">let*</span> <span class="p">((</span><span class="nf">exp</span> <span class="p">(</span><span class="nb">first </span><span class="nv">example</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">* </span><span class="nv">nil</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">test </span><span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">null</span> <span class="p">(</span><span class="nb">second </span><span class="nv">example</span><span class="p">))</span> <span class="nv">t</span><span class="p">)</span>
</span><span class='line'>           <span class="p">((</span><span class="nf">constantp</span> <span class="p">(</span><span class="nb">second </span><span class="nv">example</span><span class="p">))</span>
</span><span class='line'>        <span class="o">`</span><span class="p">(</span><span class="nf">equal</span> <span class="nv">*</span> <span class="o">,</span><span class="p">(</span><span class="nb">second </span><span class="nv">example</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">t</span> <span class="p">(</span><span class="nb">second </span><span class="nv">example</span><span class="p">))))</span>
</span><span class='line'>       <span class="nv">test-result</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">print?</span> <span class="nv">t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;~&amp;amp;&amp;gt; ~S~%&quot;</span> <span class="nv">exp</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">setf</span> <span class="nv">*</span> <span class="p">(</span><span class="nb">eval </span><span class="nv">exp</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">eq</span> <span class="nv">print?</span> <span class="nv">t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;~&amp;amp;~S~%&quot;</span> <span class="nv">*</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">setf</span> <span class="nv">test-result</span> <span class="p">(</span><span class="nb">eval </span><span class="nv">test</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">null</span> <span class="nv">test-result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">case</span> <span class="nv">print?</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">FAIL</span><span class="p">)</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;~&amp;amp;;;; FAILURE on ~S; expected ~S, got:~%;;; ~S~%&quot;</span>
</span><span class='line'>                      <span class="nv">exp</span> <span class="nv">test</span> <span class="nv">*</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">T</span><span class="p">)</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">t</span> <span class="s">&quot;~&amp;amp;;;; FAILURE: expected ~S&quot;</span> <span class="nv">test</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">otherwise</span><span class="p">)))</span>
</span><span class='line'>  <span class="nv">test-result</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
